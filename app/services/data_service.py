from app.models.estate_models import EstateSell, EstateHouse
from app.core.extensions import db
import time
from sqlalchemy import distinct


def get_sells_with_house_info(page, per_page):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    print(f"\n[DATA SERVICE] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} ({per_page} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)...")
    start_time = time.time()

    try:
        # –ó–∞–ø—Ä–æ—Å —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—â–µ. –ú—ã –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã EstateSell, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å EstateHouse.
        # –í–º–µ—Å—Ç–æ .all() –∏—Å–ø–æ–ª—å–∑—É–µ–º .paginate()
        pagination = db.session.query(EstateSell).join(EstateHouse).order_by(EstateSell.id.desc()).paginate(
            page=page,
            per_page=per_page,
            error_out=False
        )

        end_time = time.time()
        duration = round(end_time - start_time, 2)

        print(f"[DATA SERVICE] ‚úîÔ∏è –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration} —Å–µ–∫.")

        return pagination

    except Exception as e:
        print(f"[DATA SERVICE] ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: {e}")
        return None


def get_all_complex_names():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ñ–ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("[DATA SERVICE] _names –ó–∞–ø—Ä–æ—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ñ–ö...")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ (distinct) –Ω–∞–∑–≤–∞–Ω–∏—è
        results = db.session.query(distinct(EstateHouse.complex_name)).all()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π) –≤ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        complex_names = [row[0] for row in results]
        print(f"[DATA SERVICE] üìà –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ñ–ö: {len(complex_names)}")
        return complex_names
    except Exception as e:
        print(f"[DATA SERVICE] ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ñ–ö: {e}")
        return []


def get_filter_options():
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —ç—Ç–∞–∂–µ–π –∏ –∫–æ–º–Ω–∞—Ç.
    """
    print("[DATA SERVICE] üîé –ó–∞–ø—Ä–æ—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
    try:
        # –ó–∞–ø—Ä–æ—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç—Ç–∞–∂–µ–π. –ò—Å–∫–ª—é—á–∞–µ–º None –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º.
        floors = sorted([f[0] for f in db.session.query(distinct(EstateSell.estate_floor)).filter(
            EstateSell.estate_floor.isnot(None)).all()])
        # –ó–∞–ø—Ä–æ—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –ò—Å–∫–ª—é—á–∞–µ–º None –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º.
        rooms = sorted([r[0] for r in db.session.query(distinct(EstateSell.estate_rooms)).filter(
            EstateSell.estate_rooms.isnot(None)).all()])

        print(f"[DATA SERVICE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ —ç—Ç–∞–∂–µ–π: {len(floors)}, –∫–æ–º–Ω–∞—Ç: {len(rooms)}")
        return {'floors': floors, 'rooms': rooms}
    except Exception as e:
        print(f"[DATA SERVICE] ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–ø—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return {'floors': [], 'rooms': []}