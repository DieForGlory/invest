import os
import hashlib
import json
from sqlalchemy import create_engine, Table, MetaData
from sqlalchemy.orm import sessionmaker
from flask import current_app
from datetime import datetime

from ..core.extensions import db
from .discount_service import process_discounts_from_excel
from ..models.auth_models import SalesManager
from ..models import planning_models, system_models
from ..models.estate_models import EstateHouse, EstateSell, EstateDeal
from ..models.finance_models import FinanceOperation
from ..models.funnel_models import EstateBuy, EstateBuysStatusLog

CURRENT_DIR = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, '..', '..'))
DISCOUNTS_EXCEL_PATH = os.path.join(PROJECT_ROOT, 'data_sources', 'discounts_template.xlsx')


def _calculate_row_hash(data_dict):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à SHA-256 –¥–ª—è —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö."""
    encoded_row = json.dumps(data_dict, sort_keys=True, default=str).encode('utf-8')
    return hashlib.sha256(encoded_row).hexdigest()


def _sync_table(mysql_session, source_table_name, local_model, columns_map):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print(f"[SYNC] ‚öôÔ∏è  –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{source_table_name}'...")
    meta = MetaData()
    source_table = Table(source_table_name, meta, autoload_with=mysql_session.bind)
    source_query = mysql_session.query(source_table)
    if source_table_name == 'estate_houses':
        print("[SYNC] -> –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –¥–ª—è 'estate_houses': `complex_name` –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å NULL.")
        source_query = source_query.filter(source_table.c.complex_name.isnot(None))
    source_records_map = {row.id: row for row in source_query}
    source_ids = set(source_records_map.keys())
    print(f"[SYNC] -> –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_ids)} –∑–∞–ø–∏—Å–µ–π –∏–∑ MySQL (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏).")
    local_hashes = dict(db.session.query(local_model.id, local_model.data_hash).all())
    local_ids = set(local_hashes.keys())
    print(f"[SYNC] -> –ù–∞–π–¥–µ–Ω–æ {len(local_ids)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ.")
    ids_to_add = source_ids - local_ids
    ids_to_delete = local_ids - source_ids
    ids_to_check = source_ids.intersection(local_ids)
    updates_count = 0
    for item_id in ids_to_add:
        row = source_records_map[item_id]
        data_for_model = {model_col: getattr(row, source_col) for model_col, source_col in columns_map.items()}
        data_for_hash = {model_col: getattr(row, source_col) for model_col, source_col in columns_map.items() if
                         model_col != 'id'}
        data_for_model['id'] = item_id
        data_for_model['data_hash'] = _calculate_row_hash(data_for_hash)
        db.session.add(local_model(**data_for_model))
    for item_id in ids_to_check:
        row = source_records_map[item_id]
        data_for_hash = {model_col: getattr(row, source_col) for model_col, source_col in columns_map.items() if
                         model_col != 'id'}
        new_hash = _calculate_row_hash(data_for_hash)
        if new_hash != local_hashes[item_id]:
            instance = db.session.get(local_model, item_id)
            if instance:
                data_for_model = {model_col: getattr(row, source_col) for model_col, source_col in columns_map.items()}
                for key, value in data_for_model.items():
                    setattr(instance, key, value)
                instance.data_hash = new_hash
                updates_count += 1
    if ids_to_delete:
        db.session.query(local_model).filter(local_model.id.in_(ids_to_delete)).delete(synchronize_session=False)
    db.session.commit()
    print(f"[SYNC] ‚úÖ  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è '{source_table_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
          f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(ids_to_add)}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updates_count}, –£–¥–∞–ª–µ–Ω–æ: {len(ids_to_delete)}.")


def _sync_managers(mysql_session):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏."""
    source_table_name = 'users'
    local_model = SalesManager
    print(f"[SYNC-MGR] ‚öôÔ∏è  –ù–∞—á–∞–ª–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{source_table_name}'...")
    meta = MetaData()
    source_table = Table(source_table_name, meta, autoload_with=mysql_session.bind)
    source_records = {}
    for row in mysql_session.query(source_table).order_by(source_table.c.id):
        name = getattr(row, 'users_name', "").strip()
        if name and name not in source_records:
            source_records[name] = row
    source_names = set(source_records.keys())
    print(f"[SYNC-MGR] -> –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_names)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ MySQL.")
    local_records = {mgr.full_name: mgr for mgr in db.session.query(local_model).all()}
    local_names = set(local_records.keys())
    print(f"[SYNC-MGR] -> –ù–∞–π–¥–µ–Ω–æ {len(local_names)} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ.")
    names_to_add = source_names - local_names
    names_to_delete = local_names - source_names
    names_to_check = source_names.intersection(local_names)
    updates_count = 0
    for name in names_to_add:
        row = source_records[name]
        data_for_hash = {'full_name': name, 'post_title': getattr(row, 'post_title', None)}
        new_mgr = local_model(
            id=row.id,
            full_name=name,
            post_title=getattr(row, 'post_title', None),
            data_hash=_calculate_row_hash(data_for_hash)
        )
        db.session.add(new_mgr)
    for name in names_to_check:
        source_row = source_records[name]
        local_mgr = local_records[name]
        data_for_hash = {'full_name': name, 'post_title': getattr(source_row, 'post_title', None)}
        new_hash = _calculate_row_hash(data_for_hash)
        if new_hash != local_mgr.data_hash:
            local_mgr.post_title = getattr(source_row, 'post_title', None)
            local_mgr.data_hash = new_hash
            updates_count += 1
    if names_to_delete:
        for name in names_to_delete:
            db.session.delete(local_records[name])
    db.session.commit()
    print(f"[SYNC-MGR] ‚úÖ  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è '{source_table_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
          f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(names_to_add)}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updates_count}, –£–¥–∞–ª–µ–Ω–æ: {len(names_to_delete)}.")


def incremental_update_from_mysql():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–µ–π."""
    print(f"\n[HASH UPDATE] üîÑ –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û –•–ï–®–ê–ú ({datetime.now()})...")
    try:
        mysql_uri = current_app.config['SOURCE_MYSQL_URI']
        mysql_engine = create_engine(mysql_uri)
        MySQLSession = sessionmaker(bind=mysql_engine)
        mysql_session = MySQLSession()

        # –í—ã–∑–æ–≤—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        _sync_table(mysql_session, 'estate_houses', EstateHouse,
                    {'complex_name': 'complex_name', 'name': 'name', 'geo_house': 'geo_house'})

        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è estate_sells >>>
        _sync_sells(mysql_session)

        _sync_table(mysql_session, 'estate_buys', EstateBuy,
                    {'date_added': 'date_added', 'created_at': 'created_at', 'status_name': 'status_name',
                     'custom_status_name': 'custom_status_name'})
        _sync_table(mysql_session, 'estate_buys_statuses_log', EstateBuysStatusLog,
                    {'log_date': 'log_date', 'estate_buy_id': 'estate_buy_id', 'status_to_name': 'status_to_name',
                     'status_custom_to_name': 'status_custom_to_name', 'manager_id': 'users_id'})
        _sync_table(mysql_session, 'estate_deals', EstateDeal,
                    {'estate_sell_id': 'estate_sell_id', 'deal_status_name': 'deal_status_name',
                     'deal_manager_id': 'deal_manager_id', 'agreement_date': 'agreement_date',
                     'preliminary_date': 'preliminary_date', 'deal_sum': 'deal_sum', 'date_modified': 'date_modified'})
        _sync_table(mysql_session, 'finances', FinanceOperation,
                    {'estate_sell_id': 'estate_sell_id', 'summa': 'summa', 'status_name': 'status_name',
                     'payment_type': 'types_name', 'date_added': 'date_added', 'date_to': 'date_to',
                     'manager_id': 'respons_manager_id'})
        _sync_managers(mysql_session)

        print("[HASH UPDATE] ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û –•–ï–®–ê–ú –ó–ê–í–ï–†–®–ï–ù–û.\n")
        return True
    except Exception as e:
        db.session.rollback()
        print(f"[HASH UPDATE] ‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –ü–û –•–ï–®–ê–ú: {e}")
        return False
    finally:
        if 'mysql_session' in locals() and mysql_session.is_active:
            mysql_session.close()


def _sync_sells(mysql_session):
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ estate_sells, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç
    —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—è estate_sell_category.
    """
    source_table_name = 'estate_sells'
    local_model = EstateSell
    columns_map = {
        'house_id': 'house_id', 'estate_sell_category': 'estate_sell_category',
        'estate_floor': 'estate_floor', 'estate_rooms': 'estate_rooms',
        'estate_price_m2': 'estate_price_m2', 'estate_sell_status_name': 'estate_sell_status_name',
        'estate_price': 'estate_price', 'estate_area': 'estate_area'
    }
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
    CATEGORY_MAPPING = {
        'flat': '–ö–≤–∞—Ä—Ç–∏—Ä–∞', 'comm': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
        'garage': '–ü–∞—Ä–∫–æ–≤–∫–∞', 'storageroom': '–ö–ª–∞–¥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
    }

    print(f"[SYNC-SELLS] ‚öôÔ∏è  –ù–∞—á–∞–ª–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{source_table_name}'...")

    meta = MetaData()
    source_table = Table(source_table_name, meta, autoload_with=mysql_session.bind)
    source_query = mysql_session.query(source_table)
    source_records_map = {row.id: row for row in source_query}
    source_ids = set(source_records_map.keys())
    print(f"[SYNC-SELLS] -> –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_ids)} –∑–∞–ø–∏—Å–µ–π –∏–∑ MySQL.")

    local_hashes = dict(db.session.query(local_model.id, local_model.data_hash).all())
    local_ids = set(local_hashes.keys())
    print(f"[SYNC-SELLS] -> –ù–∞–π–¥–µ–Ω–æ {len(local_ids)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ.")

    ids_to_add = source_ids - local_ids
    ids_to_delete = local_ids - source_ids
    ids_to_check = source_ids.intersection(local_ids)
    updates_count = 0

    def get_mapped_data(row):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏, –ø—Ä–∏–º–µ–Ω—è—è –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        data = {}
        for model_col, source_col in columns_map.items():
            value = getattr(row, source_col)
            if model_col == 'estate_sell_category':
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é!
                value = CATEGORY_MAPPING.get(value, value)
            data[model_col] = value
        return data

    for item_id in ids_to_add:
        row = source_records_map[item_id]
        data_for_model = get_mapped_data(row)
        data_for_model['id'] = item_id
        data_for_model['data_hash'] = _calculate_row_hash(data_for_model)
        db.session.add(local_model(**data_for_model))

    for item_id in ids_to_check:
        row = source_records_map[item_id]
        data_for_model = get_mapped_data(row)
        new_hash = _calculate_row_hash(data_for_model)
        if new_hash != local_hashes[item_id]:
            instance = db.session.get(local_model, item_id)
            if instance:
                for key, value in data_for_model.items():
                    setattr(instance, key, value)
                instance.data_hash = new_hash
                updates_count += 1

    if ids_to_delete:
        db.session.query(local_model).filter(local_model.id.in_(ids_to_delete)).delete(synchronize_session=False)

    db.session.commit()
    print(f"[SYNC-SELLS] ‚úÖ  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è '{source_table_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
          f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(ids_to_add)}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updates_count}, –£–¥–∞–ª–µ–Ω–æ: {len(ids_to_delete)}.")
# <<< –í–û–ó–í–†–ê–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø >>>

def refresh_estate_data_from_mysql():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ü–û–õ–ù–£–Æ –æ—á–∏—Å—Ç–∫—É –∏ –ø–æ—Å–ª–µ–¥—É—é—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    print("\n[FULL REFRESH] üîÑ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ò –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò...")

    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–¥–æ—á–µ—Ä–Ω–∏–µ -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ)
    print("[FULL REFRESH] üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    db.session.query(FinanceOperation).delete()
    db.session.query(EstateDeal).delete()
    db.session.query(EstateBuysStatusLog).delete()
    db.session.query(EstateSell).delete()
    db.session.query(EstateHouse).delete()
    db.session.query(EstateBuy).delete()
    db.session.query(SalesManager).delete()
    db.session.commit()
    print("[FULL REFRESH] ‚úîÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")

    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é,
    # –∫–æ—Ç–æ—Ä–∞—è –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø–æ–ª–Ω–∏—Ç –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    return incremental_update_from_mysql()