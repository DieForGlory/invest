# app/services/manager_report_service.py
import openpyxl
from sqlalchemy import or_
import pandas as pd
import re
from datetime import datetime, date
from collections import defaultdict
from sqlalchemy import func, extract
import io
from flask import g
from app.core.extensions import db
from ..core.db_utils import require_mysql_db
from flask_login import current_user

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from app.models import auth_models
from app.models import planning_models
from app.models.estate_models import EstateDeal, EstateSell, EstateHouse
from app.models.finance_models import FinanceOperation
from ..models import planning_models
from . import currency_service


@require_mysql_db
def process_manager_plans_from_excel(file_path: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
    """
    df = pd.read_excel(file_path)
    plans_to_save = defaultdict(lambda: defaultdict(float))
    # –í —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
    header_pattern = re.compile(r"(–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è) (\d{2}\.\d{2}\.\d{4})", re.IGNORECASE)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º auth_models.SalesManager –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ 'users'
    managers_map = {m.users_name: m.id for m in g.mysql_db_session.query(auth_models.SalesManager).filter.all()}

    for index, row in df.iterrows():
        manager_name = row.iloc[0]
        if manager_name not in managers_map:
            print(f"[MANAGER PLANS] ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ–Ω–µ–¥–∂–µ—Ä '{manager_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            continue
        manager_id = managers_map[manager_name]

        for col_name, value in row.iloc[1:].items():
            if pd.isna(value) or value == 0:
                continue
            match = header_pattern.search(str(col_name))
            if not match:
                continue

            # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –ø–ª–∞–Ω–∞
            plan_type_str = match.group(1)
            date_str = match.group(2)
            plan_date = datetime.strptime(date_str, '%d.%m.%Y')
            year, month = plan_date.year, plan_date.month

            if '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è' in plan_type_str.lower():
                plans_to_save[(manager_id, year, month)]['plan_income'] += float(value)

    updated_count, created_count = 0, 0
    for (manager_id, year, month), values in plans_to_save.items():
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º g.company_db_session –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
        plan_entry = g.company_db_session.query(planning_models.ManagerSalesPlan).filter_by(
            manager_id=manager_id, year=year, month=month
        ).first()
        if not plan_entry:
            plan_entry = planning_models.ManagerSalesPlan(manager_id=manager_id, year=year, month=month)
            g.company_db_session.add(plan_entry)
            created_count += 1
        else:
            updated_count += 1

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º plan_volume –≤ 0, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ plan_income
        plan_entry.plan_volume = 0.0
        plan_entry.plan_income = values.get('plan_income', 0.0)

    g.company_db_session.commit()
    return f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–ª–∞–Ω–æ–≤: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}."


@require_mysql_db
def get_manager_performance_details(manager_id: int, year: int):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø–ª–∞–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞ –≥–æ–¥,
    –ó–ê–†–ê–ù–ï–ï –†–ê–°–°–ß–ò–¢–´–í–ê–Ø KPI –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ú–ï–°–Ø–¶–ê. (–° –û–¢–õ–ê–î–ö–û–ô)
    """
    print("\n" + "=" * 50)
    print(f"[MANAGER_PERFORMANCE] üèÅ –°—Ç–∞—Ä—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ID: {manager_id}, –ì–æ–¥: {year}")

    sold_statuses = current_user.company.sale_statuses
    print(f"[MANAGER_PERFORMANCE] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –§–ê–ö–¢–ê –ü–†–û–î–ê–ñ: {sold_statuses}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º auth_models.SalesManager –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = g.mysql_db_session.query(auth_models.SalesManager).filter(
        auth_models.SalesManager.id == manager_id
    ).first()
    if not manager:
        print(f"[MANAGER_PERFORMANCE] ‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å ID {manager_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ MySQL.")
        print("=" * 50 + "\n")
        return None
    print(f"[MANAGER_PERFORMANCE] ‚úÖ –ù–∞–π–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä: {manager.users_name}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º g.company_db_session –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
    plans_query = g.company_db_session.query(planning_models.ManagerSalesPlan).filter_by(manager_id=manager_id,
                                                                                         year=year).all()
    plan_data = {p.month: p for p in plans_query}
    print(f"[MANAGER_PERFORMANCE] üìö –ù–∞–π–¥–µ–Ω—ã –ø–ª–∞–Ω—ã –¥–ª—è {len(plan_data)} –º–µ—Å—è—Ü–µ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ.")

    effective_date = func.coalesce(EstateDeal.agreement_date, EstateDeal.preliminary_date)
    fact_volume_query = g.mysql_db_session.query(
        extract('month', effective_date).label('month'),
        func.sum(EstateDeal.deal_sum).label('fact_volume')
    ).filter(
        EstateDeal.deal_manager_id == manager_id,
        extract('year', effective_date) == year,
        EstateDeal.deal_status_name.in_(sold_statuses)
    ).group_by('month').all()
    print(f"[MANAGER_PERFORMANCE] üì• SQL-–∑–∞–ø—Ä–æ—Å –ø–æ –§–ê–ö–¢–£ –û–ë–™–ï–ú–ê –í–ï–†–ù–£–õ {len(fact_volume_query)} —Å—Ç—Ä–æ–∫.")
    fact_volume_data = {row.month: row.fact_volume or 0 for row in fact_volume_query}
    print(f"[MANAGER_PERFORMANCE] üëâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –§–ê–ö–¢–£ –û–ë–™–ï–ú–ê: {fact_volume_data}")

    fact_income_query = g.mysql_db_session.query(
        extract('month', FinanceOperation.date_added).label('month'),
        func.sum(FinanceOperation.summa).label('fact_income')
    ).filter(
        FinanceOperation.manager_id == manager_id,
        extract('year', FinanceOperation.date_added) == year,
        FinanceOperation.status_name == "Paid",
        or_(
            FinanceOperation.payment_type != "–í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏",
            FinanceOperation.payment_type.is_(None)
        )
    ).group_by('month').all()
    print(f"[MANAGER_PERFORMANCE] üì• SQL-–∑–∞–ø—Ä–æ—Å –ø–æ –§–ê–ö–¢–£ –ü–û–°–¢–£–ü–õ–ï–ù–ò–ô –í–ï–†–ù–£–õ {len(fact_income_query)} —Å—Ç—Ä–æ–∫.")
    fact_income_data = {row.month: row.fact_income or 0 for row in fact_income_query}
    print(f"[MANAGER_PERFORMANCE] üëâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –§–ê–ö–¢–£ –ü–û–°–¢–£–ü–õ–ï–ù–ò–ô: {fact_income_data}")

    report = []
    print("[MANAGER_PERFORMANCE] üîÑ –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º...")
    for month_num in range(1, 13):
        plan = plan_data.get(month_num)
        fact_volume = fact_volume_data.get(month_num, 0)
        fact_income = fact_income_data.get(month_num, 0)
        plan_income = plan.plan_income if plan else 0.0

        kpi_bonus = calculate_manager_kpi(plan_income, fact_income)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        print(
            f"  [–ú–µ—Å—è—Ü {month_num:02d}] –ü–ª–∞–Ω –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π: {plan_income}, –§–∞–∫—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π: {fact_income}, –§–∞–∫—Ç –æ–±—ä–µ–º: {fact_volume}")

        report.append({
            'month': month_num,
            'plan_volume': plan.plan_volume if plan else 0,
            'fact_volume': fact_volume,
            'volume_percent': (fact_volume / plan.plan_volume * 100) if (plan and plan.plan_volume > 0) else 0,
            'plan_income': plan_income,
            'fact_income': fact_income,
            'income_percent': (fact_income / plan_income * 100) if (plan and plan_income > 0) else 0,
            'kpi_bonus': kpi_bonus
        })

    final_report = {'manager_id': manager_id, 'manager_name': manager.users_name, 'performance': report}
    print("[MANAGER_PERFORMANCE] ‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    print("=" * 50 + "\n")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é users_name
    return final_report


@require_mysql_db
def generate_manager_plan_template_excel():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å –§–ò–û –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –ø–ª–∞–Ω–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥.
    """
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º auth_models.SalesManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    managers = g.mysql_db_session.query(auth_models.SalesManager).order_by(auth_models.SalesManager.users_name).all()
    manager_names = [manager.users_name for manager in managers]

    current_year = date.today().year
    headers = ['–§–ò–û']
    # –í —Ü–∏–∫–ª–µ —É–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ü–∏—è"
    for month in range(1, 13):
        date_str = f"01.{month:02d}.{current_year}"
        headers.append(f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è {date_str}")

    data = [{'–§–ò–û': name, **{header: 0 for header in headers[1:]}} for name in manager_names]

    df = pd.DataFrame(data, columns=headers)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='–®–∞–±–ª–æ–Ω –ø–ª–∞–Ω–æ–≤')
        worksheet = writer.sheets['–®–∞–±–ª–æ–Ω –ø–ª–∞–Ω–æ–≤']
        worksheet.column_dimensions['A'].width = 35
        for i in range(1, len(headers)):
            col_letter = openpyxl.utils.get_column_letter(i + 1)
            worksheet.column_dimensions[col_letter].width = 25
    output.seek(0)
    return output


def calculate_manager_kpi(plan_income: float, fact_income: float) -> float:
    if not plan_income or plan_income == 0:
        return 0.0

    completion_percentage = (fact_income / plan_income) * 100

    if completion_percentage >= 100:
        bonus = fact_income * 0.005
    elif completion_percentage >= 90:
        bonus = fact_income * 0.004
    elif completion_percentage >= 80:
        bonus = fact_income * 0.003
    else:
        bonus = 0.0

    return bonus


@require_mysql_db
def generate_kpi_report_excel(year: int, month: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ KPI –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.
    """
    usd_rate = currency_service.get_current_effective_rate()
    if not usd_rate or usd_rate == 0:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD.")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º g.company_db_session –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
    plans = g.company_db_session.query(planning_models.ManagerSalesPlan).filter(
        planning_models.ManagerSalesPlan.year == year,
        planning_models.ManagerSalesPlan.month == month,
        planning_models.ManagerSalesPlan.plan_income > 0
    ).all()

    if not plans:
        return None

    manager_ids_with_plans = [p.manager_id for p in plans]
    plans_map = {p.manager_id: p for p in plans}

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º auth_models.SalesManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    managers = g.mysql_db_session.query(auth_models.SalesManager).filter(
        auth_models.SalesManager.id.in_(manager_ids_with_plans)
    ).order_by(auth_models.SalesManager.users_name).all()

    source_data = []
    for manager in managers:
        plan = plans_map.get(manager.id)
        if not plan:
            continue

        fact_income_query = g.mysql_db_session.query(
            func.sum(FinanceOperation.summa)
        ).filter(
            FinanceOperation.manager_id == manager.id,
            extract('year', FinanceOperation.date_added) == year,
            extract('month', FinanceOperation.date_added) == month,
            FinanceOperation.status_name == "Paid",
            or_(
                FinanceOperation.payment_type != "–í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏",
                FinanceOperation.payment_type.is_(None)
            )
        ).scalar()
        fact_income = fact_income_query or 0.0
        kpi_bonus_uzs = calculate_manager_kpi(plan.plan_income, fact_income)

        source_data.append({
            "full_name": manager.users_name,  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            "position": manager.post_title or '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            "plan_uzs": plan.plan_income,
            "fact_uzs": fact_income,
            "kpi_bonus_uzs": kpi_bonus_uzs,
            "kpi_bonus_usd": kpi_bonus_uzs / usd_rate
        })

    final_report_rows = []
    for i, data in enumerate(source_data):
        final_report_rows.append({
            '‚Ññ': i + 1,
            '–§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞': data['full_name'],
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': data['position'],
            '–õ–∏—á–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–¥–æ–ª–ª. –°–®–ê)': data['plan_uzs'] / usd_rate,
            '–§–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–¥–æ–ª–ª. –°–®–ê)': data['fact_uzs'] / usd_rate,
            '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂': (data['fact_uzs'] / data['plan_uzs']) if data['plan_uzs'] > 0 else 0,
            '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∫–æ—ç—Ñ.)': None,
            '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ, NET (–¥–æ–ª–ª. –°–®–ê)': None,
            '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ, NET (—Å—É–º)': None,
            '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ, GROSS (—Å—É–º)': None
        })

    df = pd.DataFrame(final_report_rows)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–í–µ–¥–æ–º–æ—Å—Ç—å KPI', index=False, startrow=1)
        workbook = writer.book
        worksheet = writer.sheets['–í–µ–¥–æ–º–æ—Å—Ç—å KPI']
        header_format = workbook.add_format(
            {'bold': True, 'text_wrap': True, 'valign': 'top', 'fg_color': '#D7E4BC', 'border': 1, 'align': 'center'})
        money_usd_format = workbook.add_format({'num_format': '$#,##0.00', 'border': 1})
        money_uzs_format = workbook.add_format({'num_format': '#,##0', 'border': 1})
        percent_format = workbook.add_format({'num_format': '0.0%', 'border': 1})
        coef_format = workbook.add_format({'bg_color': '#FFFFCC', 'border': 1})
        title_format = workbook.add_format({'bold': True, 'font_size': 14, 'align': 'center'})
        month_names = {1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
                       9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'}
        worksheet.merge_range('A1:J1', f'–í–µ–¥–æ–º–æ—Å—Ç—å –ø–æ KPI –∑–∞ {month_names.get(month, "")} {year}', title_format)
        for col_num, value in enumerate(df.columns):
            worksheet.write(1, col_num, value, header_format)
        worksheet.set_column('A:A', 5)
        worksheet.set_column('B:B', 35)
        worksheet.set_column('C:C', 25)
        worksheet.set_column('D:E', 20, money_usd_format)
        worksheet.set_column('F:F', 15, percent_format)
        worksheet.set_column('G:G', 25, coef_format)
        worksheet.set_column('H:H', 25, money_usd_format)
        worksheet.set_column('I:I', 25, money_uzs_format)
        worksheet.set_column('J:J', 25, money_uzs_format)
        for idx, data in enumerate(source_data):
            row_num = idx + 3
            kpi_usd = data['kpi_bonus_usd']
            kpi_uzs = data['kpi_bonus_uzs']
            worksheet.write_formula(f'H{row_num}', f'=IF(ISBLANK(G{row_num}),0,{kpi_usd}*G{row_num})')
            worksheet.write_formula(f'I{row_num}', f'=IF(ISBLANK(G{row_num}),0,{kpi_uzs}*G{row_num})')
            worksheet.write_formula(f'J{row_num}', f'=IF(ISBLANK(I{row_num}),0,I{row_num}/0.88)')
    output.seek(0)
    return output


@require_mysql_db
def get_manager_kpis(manager_id: int, year: int):
    sold_statuses = current_user.company.sale_statuses
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ KPI –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü–û–°–¢–£–ü–õ–ï–ù–ò–ô.
    """
    best_complex_query = g.mysql_db_session.query(
        EstateHouse.complex_name, func.count(EstateDeal.id).label('deal_count')
    ).join(EstateSell, EstateHouse.sells).join(EstateDeal, EstateSell.deals) \
        .filter(
        EstateDeal.deal_manager_id == manager_id,
        EstateDeal.deal_status_name.in_(sold_statuses)
    ).group_by(EstateHouse.complex_name).order_by(func.count(EstateDeal.id).desc()).first()

    units_by_type_query = g.mysql_db_session.query(
        EstateSell.estate_sell_category, func.count(EstateDeal.id).label('unit_count')
    ).join(EstateDeal, EstateSell.deals).filter(
        EstateDeal.deal_manager_id == manager_id,
        EstateDeal.deal_status_name.in_(sold_statuses)
    ).group_by(EstateSell.estate_sell_category).all()

    best_year_income_query = g.mysql_db_session.query(
        extract('year', FinanceOperation.date_added).label('income_year'),
        func.sum(FinanceOperation.summa).label('total_income')
    ).filter(
        FinanceOperation.manager_id == manager_id,
        FinanceOperation.status_name == 'Paid'
    ).group_by('income_year').order_by(func.sum(FinanceOperation.summa).desc()).first()

    best_month_income_query = g.mysql_db_session.query(
        extract('year', FinanceOperation.date_added).label('income_year'),
        extract('month', FinanceOperation.date_added).label('income_month'),
        func.sum(FinanceOperation.summa).label('total_income')
    ).filter(
        FinanceOperation.manager_id == manager_id,
        FinanceOperation.status_name == 'Paid'
    ).group_by('income_year', 'income_month').order_by(func.sum(FinanceOperation.summa).desc()).first()

    best_month_in_year_income_query = g.mysql_db_session.query(
        extract('month', FinanceOperation.date_added).label('income_month'),
        func.sum(FinanceOperation.summa).label('total_income')
    ).filter(
        FinanceOperation.manager_id == manager_id,
        extract('year', FinanceOperation.date_added) == year,
        FinanceOperation.status_name == 'Paid'
    ).group_by('income_month').order_by(func.sum(FinanceOperation.summa).desc()).first()

    kpis = {
        'best_complex': {
            'name': best_complex_query.complex_name if best_complex_query else None,
            'count': best_complex_query.deal_count if best_complex_query else 0
        },
        'units_by_type': {row.estate_sell_category: row.unit_count for row in units_by_type_query},
        'best_month_in_year': {
            'income': {
                'month': int(best_month_in_year_income_query.income_month) if best_month_in_year_income_query else 0,
                'total': best_month_in_year_income_query.total_income if best_month_in_year_income_query else 0
            }
        },
        'all_time_records': {
            'best_year_income': {
                'year': int(best_year_income_query.income_year) if best_year_income_query else 0,
                'total': best_year_income_query.total_income if best_year_income_query else 0
            },
            'best_month_income': {
                'year': int(best_month_income_query.income_year) if best_month_income_query else 0,
                'month': int(best_month_income_query.income_month) if best_month_income_query else 0,
                'total': best_month_income_query.total_income if best_month_income_query else 0
            }
        }
    }
    return kpis


@require_mysql_db
def get_manager_complex_ranking(manager_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ñ–ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫ –∏ –æ–±—ä–µ–º—É –ü–û–°–¢–£–ü–õ–ï–ù–ò–ô –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º g.mysql_db_session
    ranking = g.mysql_db_session.query(
        EstateHouse.complex_name,
        func.sum(FinanceOperation.summa).label('total_income'),
        func.count(func.distinct(EstateDeal.id)).label('deal_count')
    ).join(EstateSell, EstateHouse.id == EstateSell.house_id) \
        .join(EstateDeal, EstateSell.id == EstateDeal.estate_sell_id) \
        .join(FinanceOperation, EstateSell.id == FinanceOperation.estate_sell_id) \
        .filter(
        EstateDeal.deal_manager_id == manager_id,
        FinanceOperation.manager_id == manager_id,
        FinanceOperation.status_name == "Paid"
    ) \
        .group_by(EstateHouse.complex_name) \
        .order_by(func.sum(FinanceOperation.summa).desc()) \
        .all()
    return [{"name": r.complex_name, "total_income": r.total_income, "deal_count": r.deal_count} for r in ranking]


@require_mysql_db
def get_complex_hall_of_fame(complex_name: str, start_date_str: str = None, end_date_str: str = None):
    sold_statuses = current_user.company.sale_statuses
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –æ–±—ä–µ–º—É —Å–¥–µ–ª–æ–∫ –¥–ª—è –ñ–ö.
    """
    sold_statuses = ["–°–¥–µ–ª–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ", "–°–¥–µ–ª–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞"]
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º g.mysql_db_session –∏ auth_models.SalesManager
    query = g.mysql_db_session.query(
        auth_models.SalesManager.users_name,
        func.count(EstateDeal.id).label('deal_count'),
        func.sum(EstateDeal.deal_sum).label('total_volume'),
        func.sum(EstateSell.estate_area).label('total_area')
    ).join(EstateDeal, auth_models.SalesManager.id == EstateDeal.deal_manager_id) \
        .join(EstateSell, EstateDeal.estate_sell_id == EstateSell.id) \
        .join(EstateHouse, EstateSell.house_id == EstateHouse.id) \
        .filter(
        EstateHouse.complex_name == complex_name,
        EstateDeal.deal_status_name.in_(sold_statuses)
    )

    if start_date_str:
        start_date = date.fromisoformat(start_date_str)
        query = query.filter(func.coalesce(EstateDeal.agreement_date, EstateDeal.preliminary_date) >= start_date)
    if end_date_str:
        end_date = date.fromisoformat(end_date_str)
        query = query.filter(func.coalesce(EstateDeal.agreement_date, EstateDeal.preliminary_date) <= end_date)

    ranking = query.group_by(auth_models.SalesManager.id).order_by(func.count(EstateDeal.id).desc()).all()
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é users_name
    return [{'full_name': r.users_name, 'deal_count': r.deal_count, 'total_volume': r.total_volume,
             'total_area': r.total_area} for r in ranking]